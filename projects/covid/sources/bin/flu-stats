#!/usr/bin/env ruby
#
# https://dev.socrata.com/
# https://www.opendatanetwork.com/
# https://dev.socrata.com/foundry/data.cdc.gov/pp7x-dyj2
#
# https://github.com/socrata/soda-ruby
# https://dev.socrata.com/docs/endpoints.html
# https://dev.socrata.com/docs/queries/

require 'soda'
require 'inifile'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'awesome_print'

class Config
  attr_reader :config, :options

  def initialize()
    @options = OpenStruct.new({})

    parse_cli

    @config = OpenStruct.new({:options => @options})
    ini     = IniFile.load(@options.credfile)

    @config.key_id = ini[@options.api_domain]['key_id']

    if @config.key_secret.nil?
      @config.key_secret = ini[@options.api_domain]['key_secret']
    end

    @config
  rescue ArgumentError => e
    $stderr.puts('Unable to initialize runtime: %s' % [e])
    return false
  rescue Exception => e
    $stderr.puts('Unknown problem occurred: %s' % [e])
    return false
  end

  def parse_cli()
    OptionParser.new \
    {|opts|
      opts.banner = 'Usage: %s [options]' % [$0]
      @options.credfile   = ''
      @options.key_domain = 'default'
      @options.key_id     = ''
      @options.api_domain = 'data.cdc.gov'
      @options.key_secret = ENV['KEY_SECRET']


      opts.on('-c', '--credfile cred_file', String, 'Credential file to read for API access') \
      {|v|

        if File.exist?(v)
          @options.credfile = v
        else
          raise ArgumentError,'Path: "%s" does not exist' % [v]
        end
      }

      opts.on('-k', '--key-domain ini_domain', String, 'Credential domain. Default is "default"') \
      {|v|
        @options.key_domain =  ( v.nil? ) ? 'default' : v
      }

      opts.on('-d', '--api-domain api_domain', String, 'API domain/URL IE data.cdc.gov (default)') \
      {|v|
        @options.api_domain =  ( v.nil? ) ? 'default' : v
      }

      opts.on('-i', '--id id', String, 'API key ID. Use in lieu of -c') \
      {|v|
        if @options.credfile
          raise ArgumentError, 'Cannot use -c and -i together'
        end

        @options.id = v
      }
    }.parse!

    if @options.credfile.nil? && @options.id.nil?
      raise ArgumentError, '--credfile or --id is required.'
    end

    if @options.id && @options.key_secret.nil?
      raise ArgumentError, 'KEY_SECRET env must be set to use --id IE KEY_SECRET=<secret> %s --id <id>' % [$0]
    end

  end
end

class Flu
  attr_reader :data, :response, :client

  # 'pp7x-dyj2' # Flu and pneumonia
  def initialize(c, api_id: 'pp7x-dyj2')
    @client = SODA::Client.new({:domain => c.options.api_domain, :app_token => c.options.key_secret})
    @response = client.get(api_id, {:geoid => 'National', :age => 'All', '$where' => 'deaths_from_influenza > "0"'})
    @data =_sort(@response)
  end

  def print
    ap @data
  end

  private
  def _sort(response)
    data   = {}

    response.body.each \
    {|obj|
      unless data.has_key? obj[:season]
        data[obj[:season]] = 0
      end

      data[obj[:season]] += obj[:deaths_from_pneumonia_and_influenza].to_i
    }

    data = data.sort.to_h
  end
end

#  https://data.cdc.gov/resource/r8kw-7aab.json
class Covid
  attr_reader :data, :response, :client

  # r8kw-7aab # Covid-19 death counts by week ending date and state
  def initialize(c, api_id: 'r8kw-7aab')
    @client = SODA::Client.new({:domain => c.options.api_domain, :app_token => c.options.key_secret})
    @response = client.get(api_id, {:start_week => '2019-11-01T00:00:00.000',
                                     :end_week => '2020-05-05T00:00:00.000',
                                     '$where' => 'pneumonia_influenza_and_covid > 0'})
    ap @response.body
    @data = _sort(@response)
  end

  def print
    ap @data
  end

  private
  def _sort(response)
    data   = {}

    response.body.each \
    {|obj|
      unless data.has_key? obj[:season]
        data[obj[:season]] = 0
      end

      data[obj[:season]] += obj[:deaths_from_pneumonia_and_influenza].to_i
    }

    data = data.sort.to_h
  end
end


# initialize Config options and read in credentials
unless (c = Config.new)
  $stderr.puts 'ended with error(s)'
end

flu = Flu.new(c)
flu.print

covid = Covid.new(c)
covid.print
