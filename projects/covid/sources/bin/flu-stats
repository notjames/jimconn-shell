#!/usr/bin/env ruby
#
# https://dev.socrata.com/
# https://www.opendatanetwork.com/
# https://dev.socrata.com/foundry/data.cdc.gov/pp7x-dyj2
#
# https://github.com/socrata/soda-ruby
# https://dev.socrata.com/docs/endpoints.html
# https://dev.socrata.com/docs/queries/

require 'soda/client'
require 'inifile'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'amazing_print'
require 'pry'

class Super
  class << self
    attr_accessor :data, :client, :now, :source_title, :source_api_id
  end
end

class HelpException < StandardError
end

class Config
  attr_reader :config, :options

  def initialize()
    @options = OpenStruct.new({})

    parse_cli

    @config = OpenStruct.new({:options => @options})
    ini     = IniFile.load(@options.credfile)

    @config.key_id = ini[@options.api_domain]['key_id']

    if @config.key_secret.nil?
      @config.key_secret = ini[@options.api_domain]['key_secret']
    end

    @config
  rescue HelpException
    exit 0
  rescue ArgumentError => e
    $stderr.puts('Unable to initialize runtime: %s' % [e])
    return false
  rescue Exception => e
    $stderr.puts('Unknown problem occurred: %s' % [e])
    return false
  end

  def parse_cli()
    exit_on_help = false

    OptionParser.new \
    {|opts|
      opts.banner = 'Usage: %s [options]' % [$0]
      @options.credfile   = ''
      @options.key_domain = 'default'
      @options.key_id     = ''
      @options.api_domain = 'data.cdc.gov'
      @options.key_secret = ENV['KEY_SECRET']


      opts.on('-c', '--credfile cred_file', String, 'Credential file to read for API access') \
      {|v|

        if File.exist?(v)
          @options.credfile = v
        else
          raise ArgumentError,'Path: "%s" does not exist' % [v]
        end
      }

      opts.on('-k', '--key-domain ini_domain', String, 'Credential domain. Default is "default"') \
      {|v|
        @options.key_domain =  ( v.nil? ) ? 'default' : v
      }

      opts.on('-d', '--api-domain api_domain', String, 'API domain/URL IE data.cdc.gov (default)') \
      {|v|
        @options.api_domain =  ( v.nil? ) ? 'default' : v
      }

      opts.on('-i', '--id id', String, 'API key ID. Use in lieu of -c') \
      {|v|
        if @options.credfile
          raise ArgumentError, 'Cannot use -c and -i together'
        end

        @options.id = v
      }

      opts.on('-h', '--help', 'Prints this help') \
      {
        puts opts
        exit_on_help = true
      }
    }.parse!

    raise HelpException if exit_on_help

    if @options.credfile.nil? && @options.id.nil?
      raise ArgumentError, '--credfile or --id is required.'
    end

    if @options.id && @options.key_secret.nil?
      raise ArgumentError, 'KEY_SECRET env must be set to use --id IE KEY_SECRET=<secret> %s --id <id>' % [$0]
    end

  end
end

class Flu
  attr_reader :data, :response, :client

  # 'pp7x-dyj2' # Flu and pneumonia
  def initialize(c)
    api_id  = 'pp7x-dyj2'
    @client = SODA::Client.new({:domain => c.options.api_domain, :app_token => c.options.key_secret})
    @response = client.get(api_id, {:geoid => 'National', :age => 'All', '$where' => 'deaths_from_influenza > "0"'})
    @data =_sort(@response)
  end

  def print
    ap @data
  end

  private
  def _sort(response)
    data   = {}

    response.body.each \
    {|obj|
      unless data.has_key? obj[:season]
        data[obj[:season]] = 0
      end

      data[obj[:season]] += obj[:deaths_from_pneumonia_and_influenza].to_i
    }

    data = data.sort.to_h
  end
end

#  https://data.cdc.gov/resource/r8kw-7aab.json
#  https://dev.socrata.com/foundry/data.cdc.gov/r8kw-7aab
#  https://dev.socrata.com/foundry/data.cdc.gov/uggs-hy5q
#  https://dev.socrata.com/foundry/data.cdc.gov/hc4f-j6nb
#  r8kw-7aab # provisional Covid-19 death counts by week ending date and state
class Covid
  attr_reader :data, :client, :now, :source_title, :source_api_id

  def initialize(c)
    @now    = Time.now.strftime('%Y-%m-%dT00:00:00.000')
    @client = SODA::Client.new({:domain => c.options.api_domain, :app_token => c.options.key_secret})
  end

  def s1
    response     = {}
    data         = {}
    api_id       = 'r8kw-7aab'
    response     = @client.get(api_id, :state => 'United States')
    period       = '%s-%s' % [response.body.first['start_week'], @now]

    data[period] = {}
    base         = data[period]

    response.body.each \
    {|obj|
      unless base.has_key? :covid_deaths
        base[:covid_deaths]     = 0
        base[:influenza_deaths] = 0
      end

      base[:covid_deaths]     += obj['covid_deaths'].to_i
      base[:influenza_deaths] += obj['influenza_deaths'].to_i
    }

    @source_api_id = api_id
    @source_title  = 'Provisional Covid Deaths source 1'
    @data = data
    self
  end

  def s2
    response     = {}
    data         = {}
    api_id       = 'uggs-hy5q'
    response     = @client.get(api_id, :state => 'United States')
    period       = '%s-%s' % [response.body.first['start_week'], @now]

    data[period] = {}
    base         = data[period]

    response.body.each \
    {|obj|
      unless base.has_key? :covid_deaths
        base[:covid_deaths]     = 0
        base[:influenza_deaths] = 0
      end

      base[:covid_deaths]     += obj['covid19_deaths'].to_i
      base[:influenza_deaths] += obj['influenza_deaths'].to_i
    }

    @source_api_id = api_id
    @source_title  = 'Provisional Covid Deaths source 2'
    @data = data
    self
  end

  def s3
    response     = {}
    data         = {}
    api_id       = 'hc4f-j6nb'
    response     = @client.get(api_id, :state => 'United States')
    period       = '%s-%s' % [response.body.first['start_week'], @now]

    data[period] = {}
    base         = data[period]

    response.body.each \
    {|obj|
      unless base.has_key? :covid_deaths
        base[:covid_deaths]     = 0
        base[:influenza_deaths] = 0
      end

      base[:covid_deaths]     += obj['covid_deaths'].to_i
      base[:influenza_deaths] += obj['all_influenza_deaths_j09_j11'].to_i
    }

    @source_api_id = api_id
    @source_title  = 'Provisional Covid Deaths source 3'
    @data = data
    self
  end

  def print
    $stderr.puts '%s from %s' % [@source_title, @source_api_id]
    ap @data
  end

  private
  def _sort(response)
    response
  end
end

class S4 < Covid
  def initialize(c)
    super c
    s4
  end

  # https://dev.socrata.com/foundry/data.cdc.gov/9bhg-hcku
  def s4
    data     = response = base = {}
    api_id   = '9bhg-hcku'
    response = @client.get(api_id, :state => 'United States')
    period   = '%s-%s' % [response.body.first['start_week'], @now]
    base     = {:totals => {}, :detail => {}}

    response.body.each \
    {|obj|
      unless base[:totals].has_key? :covid_deaths
        base[:totals][:covid_deaths]     = 0
        base[:totals][:influenza_deaths] = 0
      end

      unless base[:detail].has_key? obj[:sex]
        base[:detail][obj[:sex]] = {}
      end

      unless base[:detail][obj[:sex]].has_key? obj[:age_group]
        base[:detail][obj[:sex]][obj[:age_group]] = {}
      end

      unless base[:detail][obj[:sex]][obj[:age_group]].has_key? :covid19
        base[:detail][obj[:sex]][obj[:age_group]][:covid19] = 0
      end

      unless base[:detail][obj[:sex]][obj[:age_group]].has_key? :influenza
        base[:detail][obj[:sex]][obj[:age_group]][:influenza] = 0
      end

      if obj['sex'] == 'All' and obj['age_group'] == 'All Ages'
        base[:totals][:covid_deaths]                        += obj['covid_19_deaths'].to_i
        base[:totals][:influenza_deaths]                    += obj['influenza_deaths'].to_i
      end

      base[:detail][obj[:sex]][obj[:age_group]][:covid19]   += obj[:covid_19_deaths].to_i
      base[:detail][obj[:sex]][obj[:age_group]][:influenza] += obj[:influenza_deaths].to_i
    }

    @source_api_id = api_id
    @source_title  = 'Provisional COVID-19 Death Counts by Sex, Age, in the U.S. (source 4)'
    data[period] = base
    @data = data
  end

  def specific(period, type)
    puts "Statistics for death type: %s" % [type]

    @data[period][:detail].each \
    {|gender, obj|
      puts gender
      obj.each \
      {|group, value|
        puts "\t%-30s => %s" % [group, value[type]]
      }
    }
    puts
  end

  def print
    $stderr.puts '%s from %s' % [@source_title, @source_api_id]
    period = @data.keys.first

    specific period, :influenza
    specific period, :covid19
    puts

    @data[period][:totals].each \
    {|type, value|
      puts '%-25s  => %s' % [type,value]
    }
  end
end


# initialize Config options and read in credentials
unless c = Config.new
  $stderr.puts 'ended with error(s)'
  exit 1
end

flu    = Flu.new(c)
covid  = Covid.new(c)
s4     = S4.new(c)

flu.print
covid.s1.print
covid.s2.print
covid.s3.print
s4.print
