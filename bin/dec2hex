#!/usr/bin/env ruby

HEX_HASH = \
  {
    10 => 'A',
    11 => 'B',
    12 => 'C',
    13 => 'D',
    14 => 'E',
    15 => 'F',
  }

def divide(numerator)
  numerator = numerator.to_i

  [numerator / 16, numerator % 16]
end

def main(value)
  remainders = []
  result     = []

  # divide value by 16
  # if answer can still be divided by 16
  # continue to divide answer by 16 until not possible
  # take remainders of each operation from end to beginning
  # convert each to HEX value if 10-15, cat together
  # and that's the answer.

  if value.to_i / 16 == 0
    next_num, remainder = divide(value)
    remainders << remainder
  else
    while value.to_i / 16 != 0 do
      next_num, remainder = divide(value)
      remainders << remainder

      value = next_num
    end

    remainders << value
  end

  # take last two elements, convert to HEX if possible and cat
  # then do the same in remainders in reverse:
  # given: [12,5,2,4,11] => 4B25C
  #          5 4 3 1  2    (^^^^^ positions)

  remainders.reverse.each do \
  |v|
    if HEX_HASH.has_key? v.to_i
      v = HEX_HASH[v].to_s
    end
    result << v
  end

#  tmp       = result.first
#  result[0] = result[1]
#  result[1] = tmp

  puts result.join('').to_s
end

main ARGV[0]
