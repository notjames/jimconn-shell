#!/apollo/sbin/envroot "$ENVROOT/bin/python"
#
# running commands on lots of thinclients.
# blame causey@
#
from ipam import IPAMSubnet, IPAMException, IPAMClient
from IPy import IP
import threading
import Queue
import time, random
import logging
import os
import paramiko 
import optparse

class Worker(threading.Thread):

    def __init__(self, queue, cmd, user):
        self.queue = queue
        self.cmd = cmd
        self.user = user
        threading.Thread.__init__(self)

    def run(self):
        while True:
            host = self.queue.get()
    
            time.sleep(1)        
            # run the command
            self.run_cmd(host, self.user, self.cmd)

            #logging.info('host: %s done' % (host))
            self.queue.task_done()

    def run_cmd(self, host, user, cmd):
            logging.info("Executing on %s as %s" % (host, user))
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(
                paramiko.AutoAddPolicy()
            )
            try:
                ssh.connect(host, username=user, timeout=1)
                (stdin, stdout, stderr) = ssh.exec_command(cmd)
                #logging.info("uptime on %s is %s" % (host, stdout.readlines()))
                print "SUCCESS: host %s cmd output: %s" % (host, stdout.read()),
            except Exception as e:
                logging.error("caught exception: %s on host %s.  Moving on..." % (e, host))
                pass

def main(hosts, threads, cmd, user):
    
    for i in range(threads):
        t = Worker(queue, cmd, user)
        t.setDaemon(True)
        t.start()

    for host in hosts:
        queue.put(host)

    queue.join()

if __name__ == '__main__':
    
    parser = optparse.OptionParser()
    
    parser.add_option('-t', '--threads', help='Number of threads to run.', \
                        dest='threads', type='int', default=25)
    parser.add_option('-u', '--username', help='Remote username to use.', \
                        dest='username', default='root')
    parser.add_option('-w', '--whid', help='FC in which to run. (must be specified)', \
                        dest='whid', default=None)
    parser.add_option('-r', '--real', help='Really run this command on potentially \
                                            hundreds of thin clients.', \
                        action='store_true', dest='real', default=False)
    
    
    (opts, args) = parser.parse_args()

    if not opts.whid:
        logging.error('Missing whid')
        parser.print_help()
        exit(-1)

    if not opts.real:
        logging.error('Specify --real if you intend to run %s at all ThinClients in %s' % (args[0], opts.whid))
        parser.print_help()
        exit(-1)

    threads = opts.threads
    whid = opts.whid
    username = opts.username
    cmd = args[0]

    ipam = IPAMClient()
    active_addresses = []
    subnets = ipam.find_subnets(scope='AmazonInternal', location=whid, role='User')

    logging.basicConfig(level=logging.INFO)
    logging.info("EHLO! I'll be running some crazy commands over the fleet!")


    #test_addresses = ['172.28.185.15', '172.28.184.134', '172.28.188.186', '172.28.184.49', '172.28.188.19', '172.28.188.1', '172.28.187.1']
    queue = Queue.Queue()
    hosts = [] 
    for subnet in subnets:
        #print 'Working on %s' % (subnet.address)  
        ip = IP(subnet.address)
        for address in ip:
            #run_cmd(str(address), username, 'uname -a')
            hosts.append(str(address))

    logging.info('Built list of hosts.  Launching.') 
    main(hosts, threads, cmd, username)

    # something about the threading makes the console sad.  Fixing.
    os.system('stty sane')

# vim: ft=python tabstop=8 expandtab shiftwidth=4 softtabstop=4
