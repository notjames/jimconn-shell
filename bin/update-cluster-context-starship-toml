#!/usr/bin/env ruby

require 'yaml'
require 'inifile'
require 'toml-rb'
require 'amazing_print'
require 'recursive-open-struct'

TOML_FILE = File.join(ENV['HOME'],'.config','starship.toml')
KUBE_CFG  = File.join(ENV['HOME'],'.kube','config')

SUB_ACCT_ENV_MAP  = {
                      '429863676324': 'development',
                      '184966437322': 'preprod',
                      '308171672556': 'production',
                    }

# read contexts from ~/.kube/config
# add contexts to starship.toml
#   -- each context = shortened thing
class Configs
  attr_accessor :toml
  def initialize
    @toml = nil
  end

  def read_toml()
    @toml = TomlRB.load_file(TOML_FILE)
  end

  def toml_contexts()
    return @toml
  end

  def read_kubeconfig()
    RecursiveOpenStruct.new(YAML.load_file(KUBE_CFG)).contexts.map \
    {|context|
      context['context']['cluster']
    }.uniq
  end

  def read_ini()
    IniFile.load(INI_FILE).to_h
  end
end

class Arns
  attr_accessor :arns, :role_map

  def initialize(arns)
    @role_map = {}
    @arns     = arns
  end

  def to_h(arn)
    region, k, v = arn.split(/:/)[3..5]
   (@arns_hash[k] ||= []) << (v.split(/\//)[1])
    @role_map[k] = region
  end

  def each_to_h()
    @arns_hash = {}

    if @arns.is_a? String
      self.to_h(@arns)
    end

    if @arns.is_a? Array
      @arns.each\
      {|arn|
        self.to_h(arn)
      }
    end
    @arns_hash
  end

  def self.make_alias(arn)
    k, v = arn.split(/:/)[4,5]
    env = SUB_ACCT_ENV_MAP[k.to_sym]
    if env.nil?
      $stderr.puts 'SUB_ACCT_ENV_MAP is missing a sub account!'
      env = 'missing_sub'
    end

    '(%s) %s' % [env.upcase, v.split(/\//)[1]]
  end
end

kube_contexts = Configs.new.read_kubeconfig
toml_contexts = Configs.new.read_toml

toml_contexts['kubernetes']['context_aliases'] = {}

kube_contexts.each \
{|kc|
  toml_contexts['kubernetes']['context_aliases'][kc] = Arns.make_alias(kc)
}


if ARGV[0] == '--dry-run' or ARGV[0] == '-n'
  puts TomlRB.dump(toml_contexts)
else
  File.write(TOML_FILE, TomlRB.dump(toml_contexts), mode: 'w')
end
