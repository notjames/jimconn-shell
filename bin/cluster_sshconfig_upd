#!/bin/bash

# todo: add use of getops
# add --template option to point to user-specified template
# add --debug and --dryrun
#

usage()
{
  echo >&2 """
  Usage: $0 </path/to/identity_file> </path/to/generated_ssh_config>

  Both arguments are required to be absolute paths.

  """
}

get_each()
{
  cluster_name=$1
  [[ -z $cluster_name ]] && \
    {
      echo >&2 "Usage: get_each(<cluster_name>)"
      return 1
    }

  aws --region us-east-1 ec2 describe-instances \
      --filter "Name=key-name,Values=*$cluster_name*" \
      --query "Reservations[*].Instances[].{ \
                 PublicDnsName:PublicDnsName,
                 PublicIpAddress:PublicIpAddress,
                 PrivateDnsName:PrivateDnsName,
                 PrivateIpAddress:PrivateIpAddress,
                 Name: Tags[?Key == \"Name\"].Value,
                 NodePool: Tags[?Key == \"k2-nodepool\"].Value} | []" | \
  jq -r '.[] | @sh "PUBLIC_DNS=\(.PublicDnsName) PUBLIC_ADDRESS=\(.PublicIpAddress) PRIVATE_DNS=\(.PrivateDnsName) PRIVATE_ADDRESS=\(.PrivateIpAddress) NAME=\(.Name[0]) POOL=\(.NodePool[0])"'
}

whereami() {
  a="/$0"
  a=${a%/*}
  a=${a:-.}
  a=${a#/}/
  BASEDIR=$(
    cd "$a" || true
    pwd
  )
  export BASEDIR
}

declare -gA POOLCOUNT
whereami

TMPL="$BASEDIR/ssh_config.tmpl"
CLUSTER_NAME=$1
IDENTITY_FILE=$2
SSH_CONFIG=$3

[[ -z "$CLUSTER_NAME" ]] && \
  {
    echo >&2 'Please specify the cluster name you seek after.'
    exit 10
  }

[[ -z "$IDENTITY_FILE" || ! -f "$IDENTITY_FILE" ]] && \
  {
    echo >&2 'Please specify the full path to a valid ssh identity file.'
    exit 11
  }

[[ -z "$SSH_CONFIG" || ! -d "$(dirname "$SSH_CONFIG")" ]] && \
  {
    echo >&2 'Please specify the full path to the ssh config file you want to generate.'
    exit 12
  }

# back up the file if it exists.
mv -f "$SSH_CONFIG" "$SSH_CONFIG~" 2>/dev/null

while read -r vars
do
  vars="$(echo "$vars" | tr -d "'")"
  # shellcheck disable=SC2163,SC2086
  export $vars SHORT_NAME IDENTITY_FILE POOL

  [[ -z "${POOLCOUNT[$POOL]}" ]] && POOLCOUNT["$POOL"]="nil"

  let POOLCOUNT["$POOL"]+=1

  SHORT_NAME="$(echo "$NAME" | cut -d _ -f 1)"
  POOL="$POOL-${POOLCOUNT[$POOL]}"

  envsubst '$NAME $SHORT_NAME $PRIVATE_DNS $PRIVATE_ADDRESS $PUBLIC_DNS $PUBLIC_ADDRESS $IDENTITY_FILE $POOL' < "$TMPL" >> "$SSH_CONFIG"
done < <(get_each "$CLUSTER_NAME")
